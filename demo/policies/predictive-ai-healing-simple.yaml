apiVersion: kubeskippy.io/v1alpha1
kind: HealingPolicy
metadata:
  name: predictive-ai-healing-simple
  namespace: demo-apps
  annotations:
    kubeskippy.io/ai-enabled: "true"
    kubeskippy.io/description: "Predictive AI healing with early intervention"
    kubeskippy.io/confidence: "high"
    kubeskippy.io/reasoning: "Predictive analysis to prevent failures before they occur"
    kubeskippy.io/prediction-type: "early-warning"
    kubeskippy.io/intervention-threshold: "70%"
spec:
  selector:
    labelSelector:
      matchExpressions:
      - key: ai-target
        operator: In
        values: ["true"]
      - key: pattern
        operator: In
        values: ["predictive"]
    resources:
      - apiVersion: v1
        kind: Pod
      - apiVersion: apps/v1
        kind: Deployment
  
  triggers:
  # Predictive Memory Trend (Early Warning at 30%)
  - name: predictive-memory-early-warning
    type: metric
    metricTrigger:
      query: "memory_usage_percent"
      threshold: 30  # Very early intervention for demo visibility
      operator: ">"
      duration: "30s"  # Very short duration for demo
    cooldownPeriod: "3m"
  
  # Predictive CPU Escalation (Early Warning at 40%) 
  - name: predictive-cpu-escalation
    type: metric
    metricTrigger:
      query: "cpu_usage_percent"
      threshold: 40  # Very early intervention for demo visibility
      operator: ">"
      duration: "30s"  # Short duration for demo
    cooldownPeriod: "2m"
  
  # Predictive Error Rate Trend (Early Warning at 8%)
  - name: predictive-error-rate-trend  
    type: metric
    metricTrigger:
      query: "error_rate"
      threshold: 8   # Intervene earlier than traditional 10%
      operator: ">"
      duration: "90s"
    cooldownPeriod: "4m"
  
  # Predictive Restart Pattern (Early Warning at 2 restarts)
  - name: predictive-restart-pattern
    type: event
    eventTrigger:
      reason: "Restarted"
      type: "Warning" 
      count: 2       # Intervene earlier than traditional 3+ restarts
      window: "8m"
    cooldownPeriod: "5m"
  
  # Early Warning Cascade Prevention
  - name: early-warning-cascade-prevention
    type: event
    eventTrigger:
      reason: "EarlyWarning"
      type: "Warning"
      count: 1
      window: "3m"
    cooldownPeriod: "3m"
  
  actions:
  # Predictive Proactive Scaling
  - name: predictive-proactive-scaling
    type: scale
    description: "Predictive scaling before resource exhaustion"
    scaleAction:
      direction: "up"
      replicas: 1
      minReplicas: 2
      maxReplicas: 6
    priority: 8
    requiresApproval: false
  
  # Predictive Early Restart
  - name: predictive-early-restart
    type: restart
    description: "Predictive restart to prevent complete failure"
    restartAction:
      strategy: "rolling"
      maxConcurrent: 1
    priority: 12
    requiresApproval: false
  
  # Predictive Emergency Intervention
  - name: predictive-emergency-intervention
    type: delete
    description: "Emergency predictive pod deletion to prevent cascade"
    priority: 18
    requiresApproval: false
  
  safetyRules:
    maxActionsPerHour: 15  # Higher limit for predictive/continuous scenarios
    requireHealthCheck: true
    healthCheckTimeout: "90s"  # Faster health checks for predictive actions
  
  mode: "automatic"
---
apiVersion: kubeskippy.io/v1alpha1
kind: HealingPolicy
metadata:
  name: continuous-healing-monitor
  namespace: demo-apps
  annotations:
    kubeskippy.io/ai-enabled: "true"
    kubeskippy.io/description: "Monitors continuous failure applications"
    kubeskippy.io/confidence: "medium"
    kubeskippy.io/reasoning: "Specialized monitoring for continuous degradation scenarios"
spec:
  selector:
    labelSelector:
      matchExpressions:
      - key: failure-type
        operator: In
        values: ["predictive-memory", "predictive-cpu", "predictive-network"]
      - key: demo
        operator: In
        values: ["kubeskippy"]
    resources:
      - apiVersion: v1
        kind: Pod
      - apiVersion: apps/v1
        kind: Deployment
  
  triggers:
  # Continuous Memory Monitoring
  - name: continuous-memory-monitor
    type: metric
    metricTrigger:
      query: "memory_usage_percent"
      threshold: 75
      operator: ">"
      duration: "2m"
    cooldownPeriod: "6m"
  
  # Continuous CPU Monitoring  
  - name: continuous-cpu-monitor
    type: metric
    metricTrigger:
      query: "cpu_usage_percent"
      threshold: 70
      operator: ">"
      duration: "3m"
    cooldownPeriod: "8m"
  
  # Continuous Error Monitoring
  - name: continuous-error-monitor
    type: metric
    metricTrigger:
      query: "error_rate"
      threshold: 12
      operator: ">"
      duration: "2m"
    cooldownPeriod: "5m"
  
  actions:
  # Continuous Healing Response
  - name: continuous-healing-response
    type: scale
    description: "Continuous healing for degrading applications"
    scaleAction:
      direction: "up"
      replicas: 1
      minReplicas: 1
      maxReplicas: 4
    priority: 10
    requiresApproval: false
  
  # Continuous Restart Intervention
  - name: continuous-restart-intervention
    type: restart
    description: "Continuous restart for failing patterns"
    restartAction:
      strategy: "rolling"
      maxConcurrent: 2
    priority: 15
    requiresApproval: false
  
  safetyRules:
    maxActionsPerHour: 12
    requireHealthCheck: true
    healthCheckTimeout: "2m"
  
  mode: "automatic"