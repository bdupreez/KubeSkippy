apiVersion: apps/v1
kind: Deployment
metadata:
  name: flaky-web-app
  namespace: demo-apps
  labels:
    app: flaky-web-app
    demo: "true"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: flaky-web-app
  template:
    metadata:
      labels:
        app: flaky-web-app
        issue: "intermittent-failures"
    spec:
      containers:
      - name: app
        image: python:3.9-slim
        command: 
        - python3
        - -c
        - |
          from http.server import HTTPServer, BaseHTTPRequestHandler
          import random
          import time
          import json
          import threading
          
          class FlakyHandler(BaseHTTPRequestHandler):
              request_count = 0
              start_time = time.time()
              
              def do_GET(self):
                  FlakyHandler.request_count += 1
                  uptime = int(time.time() - FlakyHandler.start_time)
                  
                  # Simulate various failure scenarios
                  failure_chance = random.random()
                  
                  if failure_chance < 0.1:  # 10% chance of 500 error
                      self.send_error(500, "Internal Server Error - Random failure")
                      return
                  
                  elif failure_chance < 0.15:  # 5% chance of timeout
                      time.sleep(30)  # Simulate timeout
                      self.send_error(504, "Gateway Timeout")
                      return
                  
                  elif failure_chance < 0.20:  # 5% chance of bad gateway
                      self.send_error(502, "Bad Gateway")
                      return
                  
                  # Normal response
                  self.send_response(200)
                  self.send_header('Content-type', 'application/json')
                  self.end_headers()
                  
                  response = {
                      'status': 'ok',
                      'app': 'flaky-web-app',
                      'requests_served': FlakyHandler.request_count,
                      'uptime_seconds': uptime,
                      'timestamp': time.time()
                  }
                  
                  self.wfile.write(json.dumps(response).encode())
              
              def log_message(self, format, *args):
                  # Custom logging
                  print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {format % args}")
          
          print("Starting flaky web application on port 8080...")
          server = HTTPServer(('0.0.0.0', 8080), FlakyHandler)
          
          # Periodically simulate process issues
          def simulate_issues():
              while True:
                  time.sleep(random.randint(60, 180))  # Every 1-3 minutes
                  issue = random.choice(['memory_spike', 'cpu_spike', 'none'])
                  
                  if issue == 'memory_spike':
                      print("Simulating memory spike...")
                      data = bytearray(100 * 1024 * 1024)  # 100MB
                      time.sleep(30)
                      del data
                  elif issue == 'cpu_spike':
                      print("Simulating CPU spike...")
                      end_time = time.time() + 20
                      while time.time() < end_time:
                          [i**2 for i in range(10000)]
          
          # Start issue simulation in background
          threading.Thread(target=simulate_issues, daemon=True).start()
          
          # Start server
          server.serve_forever()
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: flaky-web-app
  namespace: demo-apps
spec:
  selector:
    app: flaky-web-app
  ports:
  - port: 80
    targetPort: 8080
    name: http
  type: ClusterIP