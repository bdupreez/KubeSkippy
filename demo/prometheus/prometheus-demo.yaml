# Minimal Prometheus deployment for demo
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    scrape_configs:
    # Scrape Kubernetes metrics
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
    
    # Scrape kube-state-metrics
    - job_name: 'kube-state-metrics'
      static_configs:
      - targets: ['kube-state-metrics.kube-system:8080']
    
    # Scrape KubeSkippy operator metrics
    - job_name: 'kubeskippy'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - kubeskippy-system
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: kubeskippy-controller-metrics
      - source_labels: [__address__]
        target_label: __address__
        regex: (.+)
        replacement: $1
    
    # Scrape demo apps that expose metrics
    - job_name: 'demo-apps'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - demo-apps
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: (flaky-web-app|cpu-spike-app|memory-leak-app)
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --web.console.libraries=/usr/share/prometheus/console_libraries
        - --web.console.templates=/usr/share/prometheus/consoles
        - --web.enable-lifecycle
        ports:
        - containerPort: 9090
          name: web
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    name: web
  type: ClusterIP
---
# RBAC for Prometheus
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring
---
# Update flaky-web-app to expose Prometheus metrics
apiVersion: v1
kind: ConfigMap
metadata:
  name: flaky-web-app-metrics
  namespace: demo-apps
data:
  metrics.py: |
    from prometheus_client import Counter, Histogram, Gauge, generate_latest
    import time
    import random
    
    # Define metrics
    http_requests_total = Counter('http_requests_total', 'Total HTTP requests', ['method', 'status'])
    http_request_duration_seconds = Histogram('http_request_duration_seconds', 'HTTP request duration')
    connection_pool_active = Gauge('connection_pool_active_connections', 'Active connections in pool')
    connection_pool_max = Gauge('connection_pool_max_connections', 'Maximum connections in pool')
    
    # Initialize connection pool metrics
    connection_pool_max.set(100)
    
    def record_request(method='GET', status=200, duration=None):
        http_requests_total.labels(method=method, status=str(status)).inc()
        if duration:
            http_request_duration_seconds.observe(duration)
    
    def update_connection_pool():
        # Simulate connection pool usage
        active = random.randint(10, 95)
        connection_pool_active.set(active)